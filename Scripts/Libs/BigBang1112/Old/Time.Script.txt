declare Integer[Text] G_LibTime_Watch;
declare Integer[Text] G_LibTime_Watch_PauseStart;
declare Integer[Text] G_LibTime_Watch_PauseTime;

Void Watch_Create(Text _WatchName) {
    G_LibTime_Watch[_WatchName] = -1;
    G_LibTime_Watch_PauseStart[_WatchName] = -1;
    G_LibTime_Watch_PauseTime[_WatchName] = 0;
}

Void Watch_Remove(Text _WatchName) {
    G_LibTime_Watch.removekey(_WatchName);
    G_LibTime_Watch_PauseStart.removekey(_WatchName);
    G_LibTime_Watch_PauseTime.removekey(_WatchName);
}

Boolean Watch_Start(Text _WatchName) {
    if(G_LibTime_Watch[_WatchName] == -1)
        G_LibTime_Watch[_WatchName] = Now;
    else return False;
    
    return True;
}

Integer Watch_Track(Text _WatchName) {
    return Now - G_LibTime_Watch[_WatchName] - G_LibTime_Watch_PauseTime[_WatchName];
}

Integer Watch_Stop(Text _WatchName) {
    declare EndTime = Watch_Track(Text _WatchName);
    Watch_Create(_WatchName);
    return EndTime;
}

Boolean Watch_Pause(Text _WatchName) {
    if(G_LibTime_Watch_PauseStart[_WatchName] == -1)
        G_LibTime_Watch_PauseStart[_WatchName] = Now;
    else return False;

    return True;
}

Void Watch_Unpause(Text _WatchName) {
    if(G_LibTime_Watch_PauseStart[_WatchName] != -1) {
        G_LibTime_Watch_PauseTime[_WatchName] += Now - G_LibTime_Watch_PauseStart[_WatchName];
        G_LibTime_Watch_PauseStart[_WatchName] = -1;
    }
    else return False;

    return True;
}

Boolean Watch_IsBroken(Text _WatchName) {
    if(!G_LibTime_Watch.existskey(_WatchName)
    || !G_LibTime_Watch_PauseStart.existskey(_WatchName)
    || !G_LibTime_Watch_PauseTime.existskey(_WatchName))
        return True;
    return False;
}

Text Insert() {
	return """""";
}