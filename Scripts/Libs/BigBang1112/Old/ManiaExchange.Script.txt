// A ManiaScript wrapper around ManiaExchange API
// The results are in XML format to keep the library ManiaScript friendly
// Both synchronous and asynchronous methods available

#Include "TextLib" as TextLib

declare CHttpRequest[Text] G_LibManiaExchange_Requests;

CXmlDocument Private_ProcessSyncRequest(Text _Url) {
    if(Http.SlotsAvailable == 0) return Null;
    declare CXmlDocument Doc;
    declare Request = Http.CreateGet(_Url, False, "Content-Type: application/xml");
    wait(Request.IsCompleted);
    if(Request.StatusCode == 200) Doc = Xml.Create(Request.Result);
    Http.Destroy(Request);
    return Doc;
}

Boolean Private_ProcessAsyncRequest(Text _RequestName, Text _Url) {
    if(G_LibManiaExchange_Requests.existskey(_RequestName) || Http.SlotsAvailable == 0)
        return False;
    else
        G_LibManiaExchange_Requests[_RequestName] = Http.CreateGet(_Url, False, "Content-Type: application/xml");

    return True;
}

CXmlDocument TrackSearch() {
    return Null;
}

CXmlDocument TrackInfo(Text _Site, Integer _TrackId) {
    return Private_ProcessSyncRequest("""https://api.mania-exchange.com/{{{TextLib::ToLowerCase(_Site)}}}/maps/{{{_TrackId}}}""");
}

CXmlDocument TrackInfoMultiple(Text _Site, Integer[] _TrackId) {
    return Private_ProcessSyncRequest("""https://api.mania-exchange.com/{{{TextLib::ToLowerCase(_Site)}}}/maps/{{{_TrackId}}}""");
}

CXmlDocument TrackWorldRecord(Text _Site, Integer _TrackId) {
    return Private_ProcessSyncRequest("""https://api.mania-exchange.com/{{{TextLib::ToLowerCase(_Site)}}}/tracks/worldrecord/{{{_TrackId}}}""");
}

CXmlDocument TrackReplays(Text _Site, Integer _TrackId, Integer _Amount) {
    return Private_ProcessSyncRequest("""https://api.mania-exchange.com/{{{TextLib::ToLowerCase(_Site)}}}/replays/{{{_TrackId}}}/{{{_Amount}}}""");
}

CXmlDocument TrackEmbeddedObjects(Text _Site, Integer _TrackId) {
    return Private_ProcessSyncRequest("""https://api.mania-exchange.com/{{{TextLib::ToLowerCase(_Site)}}}/tracks/embeddedobjects/{{{_TrackId}}}""");
}

//Binary
CXmlDocument TrackScreenshot(Text _Site, Integer _TrackId, Text _Type) {
    return Private_ProcessSyncRequest("""https://{{{TextLib::ToLowerCase(_Site)}}}.mania-exchange.com/tracks/screenshot/{{{TextLib::ToLowerCase(_Type)}}}/{{{_TrackId}}}""");
}

//Binary
CXmlDocument TrackThumbnail(Text _Site, Integer _TrackId) {
    return Private_ProcessSyncRequest("""https://{{{TextLib::ToLowerCase(_Site)}}}.mania-exchange.com/tracks/thumbnail/{{{_TrackId}}}""");
}

Boolean TrackInfoAsync(Text _RequestName, Text _Site, Integer _TrackId) {
    return Private_ProcessAsyncRequest(_RequestName, """https://api.mania-exchange.com/{{{TextLib::ToLowerCase(_Site)}}}/maps/{{{_TrackId}}}""");
}

Boolean TrackInfoMultipleAsync(Text _RequestName, Text _Site, Integer _TrackId) {
    return Private_ProcessAsyncRequest(_RequestName, """https://api.mania-exchange.com/{{{TextLib::ToLowerCase(_Site)}}}/maps/{{{_TrackId}}}""");
}

Boolean TrackWorldRecordAsync(Text _RequestName, Text _Site, Integer _TrackId) {
    return Private_ProcessAsyncRequest(_RequestName, """https://api.mania-exchange.com/{{{TextLib::ToLowerCase(_Site)}}}/tracks/worldrecord/{{{_TrackId}}}""");
}

Boolean TrackReplaysAsync(Text _RequestName, Text _Site, Integer _TrackId, Integer _Amount) {
    return Private_ProcessAsyncRequest(_RequestName, """https://api.mania-exchange.com/{{{TextLib::ToLowerCase(_Site)}}}/replays/{{{_TrackId}}}/{{{_Amount}}}""");
}

Boolean TrackEmbeddedObjectsAsync(Text _RequestName, Text _Site, Integer _TrackId) {
    return Private_ProcessAsyncRequest(_RequestName, """https://api.mania-exchange.com/{{{TextLib::ToLowerCase(_Site)}}}/tracks/embeddedobjects/{{{_TrackId}}}""");
}

//Binary
Boolean TrackScreenshotAsync(Text _RequestName, Text _Site, Integer _TrackId, Text _Type) {
    return Private_ProcessAsyncRequest(_RequestName, """https://{{{TextLib::ToLowerCase(_Site)}}}.mania-exchange.com/tracks/screenshot/{{{TextLib::ToLowerCase(_Type)}}}/{{{_TrackId}}}""");
}

//Binary
Boolean TrackThumbnailAsync(Text _RequestName, Text _Site, Integer _TrackId) {
    return Private_ProcessAsyncRequest(_RequestName, """https://{{{TextLib::ToLowerCase(_Site)}}}.mania-exchange.com/tracks/thumbnail/{{{_TrackId}}}""");
}

CHttpRequest[Text] BeginAsyncRequests() {
    declare CHttpRequest[Text] Requests;

    foreach(Name => Request,G_LibManiaExchange_Requests) {
        if(Request.IsCompleted)
            Requests[Name] = Request;
    }
    
    return Requests;
}

Void EndAsyncRequests() {
    foreach(Name => Request,G_LibManiaExchange_Requests) {
        Http.Destroy(Request);
        G_LibManiaExchange_Requests.removekey(Name);
    }
}

Void Loop() {
	
}